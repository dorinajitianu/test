task initValidation() {
    doFirst {
        if (!new File("${projectDir}/extracted/oxygen/").exists()) {
            ant.get(src: 'https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz', dest: "${projectDir}/oxygen.tar.gz", skipexisting: 'true')
            ant.untar(src: "${projectDir}/oxygen.tar.gz", dest: "${projectDir}/extracted", compression: 'gzip')
            new File("${projectDir}/extracted/oxygen/scriptinglicensekey.txt").write(System.getenv('SCRIPTING_LICENSE_KEY').replaceAll("  ", "\n"))
        }
    }
    doLast {
        project.exec {
            workingDir "${projectDir}/extracted/oxygen/scripts"
            commandLine 'chmod', '700', 'validate.sh'
        }
    }
}

task runValidation(type: Exec, dependsOn: [initValidation]) {
    workingDir "${projectDir}/extracted/oxygen"
    commandLine "${projectDir}/extracted/oxygen/scripts/validate.sh",
            "${projectDir}/../validation/" + validationDir, "-sf",
            "${projectDir}/../validateScript.xpr", "-rft", "html", "-rf",
            "${projectDir}/../report/validationReport.html"

    doLast {
        if (execResult.getExitValue() != 0) {
            println new File("${projectDir}/../report/validationReport.html").text
            throw new TaskExecutionException(it, new Exception("Validation failed, see task output for details."))
        } else {
            // Replace file locations from GitHub VM with locations from repository.
            ant.replace(
                    file: '../report/validationReport.html',
                    token: ghPagesUrl + '/oxygen-sample-validation-script/oxygen-sample-validation-scriptfile:/home/runner/work/oxygen-sample-validation-script/oxygen-sample-validation-script',
                    value:  repoMainBranchUrlRaw
            )
            ant.replace(
                    file: '../report/validationReport.html',
                    token: '/home/runner/work/oxygen-sample-validation-script/oxygen-sample-validation-script',
                    value:  repoMainBranchUrlRaw
            )
        }
    }
}

defaultTasks 'runValidation'

